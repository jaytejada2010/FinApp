@model FinanceWebPortal.loan

@{
    ViewBag.Title = "Index";
}

@{
    var data1 = (IEnumerator<loan>)ViewData["transacts"];
}

<h2>Loans</h2>
<table class="table">
    <tr>
        <td><center><b>Loan ID</b></center></td>
        <td><center><b>Loan Name</b></center></td>
        <td><center><b>Principal Amount</b></center></td>
        <td><center><b>Interest Rate</b></center></td>
        <td><center><b>Owed Total</b></center></td>
        <td><center><b>Monthly Due</b></center></td>
        <td><center><b>Amount Paid</b></center></td>
        <td><center><b>Remaining Amount</b></center></td>
        <td></td>
    </tr>
    @{
        loan l = new loan();
        user u = (user)Session["curUser"];
        var data2 = (IEnumerator<transaction>)ViewData["loans"];
        transaction nowCash;
        double cashRemain = 0;
        while (data2.MoveNext())
        {
            nowCash = (transaction)data2.Current;
            if (nowCash.userID == u.userID)
            {
                cashRemain += (nowCash.transactType.Trim().Equals("Income")) ? (nowCash.transactAmount) : (-nowCash.transactAmount);
            }
        }

        double total = 0;
        while (data1.MoveNext())
        {
            l = data1.Current;

            if (l.userID == u.userID)
            {
                double remain = l.loanTotal - l.loanAmountPaid;
                total += remain;
                double interest = l.loanInterest * 100;
                float mDue = (float)(remain / l.loanTerm);
                <tr>
                    <td style="text-align: center">@l.loanID</td>
                    <td style="text-align: center">@l.loanCreditor</td>
                    <td style="text-align: center">PHP @l.loanPrincipal</td>
                    <td style="text-align: center">@interest%</td>
                    <td style="text-align: center">PHP @l.loanTotal</td>
                    <td style="text-align: center">PHP @mDue</td>
                    <td style="text-align: center">PHP @l.loanAmountPaid</td>
                    <td style="text-align: center">PHP @remain</td>
                    <td>
                        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#payLoanModal" onclick="openPay(this)">
                            Pay Loan
                        </button>
                    </td>
                </tr>
            }
        }
    }
</table>
<div class="row">
    <div style="width: 50%" class="col-xs-6">
        <center><h3>Total Loan: PHP @total.00</h3></center>
    </div>
    <div style="width: 50%" class="col-xs-6">
        <h3></h3>
        <center>
            <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal">
                Add Loan
            </button>
        </center>
    </div>
    
</div>

<!-- Add Loans Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="exampleModalLabel">Add Loans</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm("CreateLoan", "Loans", FormMethod.Post, new { id = "create" }))
                {
                    @Html.AntiForgeryToken()
                    <table>
                        <tr>
                            <td style="width: 100px"><center><label>Name of Creditor</label></center></td>
                            <td>@Html.EditorFor(model => model.loanCreditor, new { htmlAttributes = new { @class = "form-control", @placeholder = "Loan Creditor" } })</td>
                        </tr>
                        <tr>
                            <td><center><label>Loan <br />Principal</label></center></td>
                            <td>@Html.EditorFor(model => model.loanPrincipal, new { htmlAttributes = new { @class = "form-control", @type = "number", @id = "principal", @placeholder = "Loan Principal" } })</td>
                        </tr>
                        <tr>
                            <td><center><label>Loan <br />Interest (%)</label></center></td>
                            <td>@Html.EditorFor(model => model.loanInterest, new { htmlAttributes = new { @class = "form-control", @type = "number", @id = "interest", @placeholder = "Loan Interest Rate in Percent", @style = "width: 300px;" } })</td>
                        </tr>
                        <tr>
                            <td><center><label>Total Amount</label></center></td>
                            <td>
                                @Html.EditorFor(model => model.loanTotal, new { htmlAttributes = new { @class = "form-control", @type = "hidden", @id = "totAmount", @placeholder = "Loan Interest Rate in Percent", @style = "width: 300px;" } })
                                <input form="null" class="form-control" type="text" disabled id="totAmt" placeholder="Monthly Dues" />
                            </td>
                        </tr>
                        <tr>
                            <td><center><label>Loan Term (Months)</label></center></td>
                            <td>@Html.EditorFor(model => model.loanTerm, new { htmlAttributes = new { @class = "form-control", @type = "number", @id = "month", @placeholder = "Loan Term (in Months)" } })</td>
                        </tr>
                        <tr>
                            <td><center><label>Monthly Dues</label></center></td>
                            <td><input form="null" class="form-control" type = "text" disabled id = "monthly" placeholder = "Monthly Dues"/></td>
                        </tr>
                    </table>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-primary" form="create">Create Loan</button>
            </div>
        </div>
    </div>
</div>

<!-- Pay Loan Modal -->
<div class="modal fade" id="payLoanModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="exampleModalLabel">Pay Loan</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group container">
                    @using (Html.BeginForm("PayLoan", "Loans", FormMethod.Post, new { id = "createP" }))
                    {
                        @Html.AntiForgeryToken()
                    <table>
                        <tr>
                            <td style="width: 100px"><center><label>Loan<br>ID: </label></center></td>
                            <td>
                                @Html.EditorFor(model => model.loanID, new { htmlAttributes = new { @class = "form-control", @type = "hidden", @id = "lID" } })
                                <input form="null" class="form-control" type="number" disabled id="loID" />
                            </td>
                        </tr>
                        <tr>
                            <td style="width: 100px"><center><label>Loan<br />Creditor: </label></center></td>
                            <td>@Html.EditorFor(model => model.loanCreditor, new { htmlAttributes = new { @class = "form-control", @disabled = "true", @id = "lCreditor" } })</td>
                        </tr>
                        <tr>
                            <td><center><label>Current Balance: </label></center></td>
                            <td><input form="null" class="form-control" type="text" disabled id="lCBal" placeholder="Monthly Dues" /></td>
                        </tr>
                        <tr>
                            <td><center><label>Available Cash: </label></center></td>
                            <td><input form="null" class="form-control" type="text" disabled id="lRemain" value="PHP @((int)cashRemain).00" /></td>
                        </tr>
                        <tr>
                            <td><center><label>Amount<br />To Pay: </label></center></td>
                            <td>@Html.EditorFor(model => model.loanAmountPaid, new { htmlAttributes = new { @class = "form-control", @type = "number", @id = "lPaying", @style = "width: 300px;", @min = "0", @max = cashRemain } })</td>
                        </tr>
                        <tr>
                            <td><center><label>New Loan Balance: </label></center></td>
                            <td>
                                <input form="null" class="form-control" type="text" disabled id="lNBal" placeholder="PHP 0.00" />
                            </td>
                        </tr>
                    </table>
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-primary" form="createP">Pay Loan</button>
            </div>
        </div>
    </div>
</div>
<script>
    var principalFLD = document.getElementById("principal");
    var interestFLD = document.getElementById("interest");
    var totalFLD = document.getElementById("totAmt");
    var totalFLDns = document.getElementById("totAmount");
    var termFLD = document.getElementById("month");
    var monthlyDuesFLD = document.getElementById("monthly");
    var payingFLD = document.getElementById("lPaying");
    var newAmountFLD = document.getElementById("lNBal");

    var lCurrent, lPay;

    principalFLD.addEventListener("input", changeValues);
    interestFLD.addEventListener("input", changeValues);
    termFLD.addEventListener("input", changeValues);
    payingFLD.addEventListener("input", updateValue);


    var t, m;

    function changeValues() {
        t = Math.round(principalFLD.value * (1 + (interestFLD.value / 100)));
        m = Math.round(t / (termFLD.value > 0 ? termFLD.value : 1));
        totalFLDns.value = t;
        totalFLD.value = 'PHP ' + t + '.00';
        monthlyDuesFLD.value = 'PHP ' + m + '.00';
    }

    function updateValue() {
        lCurrent = document.getElementById("lCBal").value;
        lCurrent = lCurrent.replace(".00", "");
        lCurrent = parseInt(lCurrent.replace("PHP ", ""));

        newAmountFLD.value = 'PHP ' + (lCurrent - payingFLD.value) + '.00';

    }

    function openPay(but) {
        var row = but.parentElement.parentElement;

        document.getElementById("lID").value = parseInt(row.cells[1].innerHTML);
        document.getElementById("loID").value = parseInt(row.cells[1].innerHTML);
        document.getElementById("lCreditor").value = row.cells[2].innerHTML;
        document.getElementById("lCBal").value = row.cells[8].innerHTML + '.00';
    }
</script>
